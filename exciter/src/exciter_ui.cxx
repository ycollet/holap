// generated by Fast Light User Interface Designer (fluid) version 1.0110

#include <libintl.h>
#include "exciter_ui.h"

Rueda::Rueda(int x,int y, int w, int h, const char *label):Fl_Dial(x,y,w,h,label) {
  char tempfile[128];

sprintf(tempfile,"%s/knob.png",DATADIR);

img = Fl_Shared_Image::get((const char *)tempfile);

if (w != 50) 
   temp = img->copy(w*51,w);
   else temp= img;
}

Rueda::~Rueda() {
  img ->release();
delete temp;
}

void Rueda::draw() {
  int ox,oy,ww,hh;
int paso;
char buf[128];
float val;

ox = x();
oy = y();
ww = w();
hh = h();



  if (minimum() == maximum())
    val = 0.5;
  else {
    val = (value()-minimum())/(maximum()-minimum());
    if (val > 1.0) val = 1.0;
    else if (val < 0.0) val = 0.0;
  }


  paso = (int) (val * 47);


if (damage()&FL_DAMAGE_ALL)
{
draw_box(box(), ox, oy, ww, hh, color());
}


// if (Fl::focus() == this) box(FL_THIN_UP_BOX); else box(FL_FLAT_BOX);


draw_box(box(), ox, oy, ww, hh, color());

temp->draw(ox,oy,ww,hh,paso*ww,0);


// format(buf);

bzero(buf,sizeof(buf));

sprintf(buf,theformat,value());

draw_box(box(),ox,oy+ww,ww,hh-ww, color());

fl_font(FL_HELVETICA, 11);

fl_color(active_r() ? labelcolor() : fl_inactive(labelcolor()));

fl_draw(buf, ox, oy+ww,ww,hh-ww,FL_ALIGN_CLIP);
}

int Rueda::handle(int  event) {
  int i=0;

if (event == FL_PUSH && Fl::visible_focus()) {
    Fl::focus(this);
    redraw();
} 



switch (event) 
	{
    	              		
    		 case FL_MOUSEWHEEL :
                      {
                      if (Fl::e_dy==0) return 0;
                      handle_push();
                      handle_drag(clamp(increment(value(),Fl::e_dy)));
                      handle_release();
                      return 1;	
                      }
         
                case FL_FOCUS :
                case FL_UNFOCUS :
                      if (Fl::visible_focus()) {
                      redraw();
                      return 1;
                      } else return 0;
        }


 i = Fl_Dial::handle(event);

return i;
}

SliderW::SliderW(int x,int y, int w, int h, const char *label):Fl_Value_Slider(x,y,w,h,label) {
}

int SliderW::handle(int event) {
  if (event == FL_PUSH && Fl::visible_focus()) {
    Fl::focus(this);
    redraw();
}  
  
  int sxx = x(), syy = y(), sww = w(), shh = h();
  
  if (horizontal()) {
    sxx += 35; sww -= 35;
  } else {
    syy += 25; shh -= 25;
 }
  
return handle2(event,
                  sxx+Fl::box_dx(box()),
                  syy+Fl::box_dy(box()),
                  sww-Fl::box_dw(box()),
                  shh-Fl::box_dh(box()));
}

int SliderW::handle2(int event, int X, int Y, int W, int H) {
  switch (event) {
  case FL_PUSH:
    if (!Fl::event_inside(X, Y, W, H)) return 0;
    handle_push();
  case FL_DRAG: {

    double val;
    if (minimum() == maximum())
      val = 0.5;
    else {
      val = (value()-minimum())/(maximum()-minimum());
      if (val > 1.0) val = 1.0;
      else if (val < 0.0) val = 0.0;
    }

    int ww = (horizontal() ? W : H);
    int mx = (horizontal() ? Fl::event_x()-X : Fl::event_y()-Y);
    int S=0;
    static int offcenter;

    if (type() == FL_HOR_FILL_SLIDER || type() == FL_VERT_FILL_SLIDER) {

      S = 1;
      if (event == FL_PUSH) {
        int xx = int(val*ww+.5);
        offcenter = mx-xx;
        if (offcenter < -10 || offcenter > 10) offcenter = 0;
        else return 1;
      }

    } else {

      S = int(0*ww+.5); if (S >= ww) return 0;
      int T = (horizontal() ? H : W)/2+1;
      if (type()==FL_VERT_NICE_SLIDER || type()==FL_HOR_NICE_SLIDER) T += 4;
      if (S < T) S = T;
      if (event == FL_PUSH) {
       int xx = int(val*(ww-S)+.5);
        offcenter = mx-xx;
        if (offcenter < 0) offcenter = 0;
        else if (offcenter > S) offcenter = S;
        else return 1;
      }
    }

    int xx = mx-offcenter;
    double v;
    char tryAgain = 1;
    while (tryAgain)
    {
      tryAgain = 0;
      if (xx < 0) {
        xx = 0;
        offcenter = mx; if (offcenter < 0) offcenter = 0;
      } else if (xx > (ww-S)) {
        xx = ww-S;
        offcenter = mx-xx; if (offcenter > S) offcenter = S;
      }
      v = round(xx*(maximum()-minimum())/(ww-S) + minimum());
      // make sure a click outside the sliderbar moves it:
      if (event == FL_PUSH && v == value()) {
        offcenter = S/2;
        event = FL_DRAG;
        tryAgain = 1;
      }
    }


   handle_drag(clamp(v));
    } return 1;
 
    case FL_MOUSEWHEEL :
  
      if (Fl::e_dy==0) return 0;
      handle_push();
      handle_drag(clamp(increment(value(),Fl::e_dy)));
      handle_release();
      return 1;
    
 
  case FL_RELEASE:
    handle_release();
    return 1;
  case FL_KEYBOARD :
    switch (Fl::event_key()) {
      case FL_Up:
        if (horizontal()) return 0;
        handle_push();
        handle_drag(clamp(increment(value(),-1)));
        handle_release();
        return 1;
      case FL_Down:
        if (horizontal()) return 0;
        handle_push();
        handle_drag(clamp(increment(value(),1)));
        handle_release();
        return 1;
      case FL_Left:
        if (!horizontal()) return 0;
        handle_push();
        handle_drag(clamp(increment(value(),-1)));
        handle_release();
        return 1;
      case FL_Right:
        if (!horizontal()) return 0;
        handle_push();
        handle_drag(clamp(increment(value(),1)));
        handle_release();
        return 1;
      default:
        return 0;
    }
    // break not required because of switch...
  case FL_FOCUS :
  case FL_UNFOCUS :
    if (Fl::visible_focus()) {
      redraw();
      return 1;
    } else return 0;
  case FL_ENTER :
  case FL_LEAVE :
    return 1;
  default:
    return 0;
  }
}

void SliderW::draw() {
  int X,Y,W,H;





int sxx = x(), syy = y(), sww = w(), shh = h();
int bxx = x(), byy = y(), bww = w(), bhh = h();
 
  if (horizontal()) {
    bww = 35; sxx += 35; sww -= 35;
  } else {
    syy += 25; bhh = 25; shh -= 25;
  }
  if (damage()&FL_DAMAGE_ALL) draw_box(box(),sxx,syy,sww,shh,color());
 
                  X=sxx+Fl::box_dx(box());
                  Y=syy+Fl::box_dy(box());
                  W=sww-Fl::box_dw(box());
                  H=shh-Fl::box_dh(box());
 
 
 
 
  double val;
  if (minimum() == maximum())
    val = 0.5;
  else {
    val = (value()-minimum())/(maximum()-minimum());
    if (val > 1.0) val = 1.0;
    else if (val < 0.0) val = 0.0;
  }

 int ww = (horizontal() ? W : H);
  int xx, S;

    S = int(.25*ww+.5);
    // S= 1;
 
    int T = (horizontal() ? H : W)/2+1;
    if (type()==FL_VERT_NICE_SLIDER || type()==FL_HOR_NICE_SLIDER) T += 12;
    // if (S < T) S = T;
    xx = int(val*(ww-S)+.5);
  
  int xsl, ysl, wsl, hsl;
  if (horizontal()) {
    xsl = X+xx;
    wsl = S;
    ysl = Y;
    hsl = H-2;
  } else {
    ysl = Y+xx;
    hsl = S;
    xsl = X;
    wsl = W-2;
  }



  
  fl_push_clip(X, Y, W, H);
  //draw_box();

  if (( Fl::scheme_) && (strcmp(Fl::scheme_, "plastic")==0)) 
  draw_box(FL_PLASTIC_DOWN_BOX,X,Y,W,H,color());
  else draw_box(FL_FLAT_BOX,X,Y,W,H,color());
    
  fl_pop_clip();

  Fl_Color black = active_r() ? FL_FOREGROUND_COLOR : FL_INACTIVE_COLOR;
 
  if (type() == FL_VERT_NICE_SLIDER) {
   draw_box(FL_THIN_DOWN_BOX, X+W/2-2, Y, 4, H, black);
  
  } else if (type() == FL_HOR_NICE_SLIDER) {
   
  draw_box(FL_THIN_DOWN_BOX, X, Y+H/2-2, W, 4, black);
  }

  
  
  Fl_Color juan,pepe;
  Fl_Color perilla=fl_rgb_color(57, 65, 53);;
  
  
  
  float vval=fabsf(val);
  
  juan = fl_color_average(fl_darker(selection_color()),fl_lighter(selection_color()),vval);
  pepe = fl_color_average(fl_lighter(selection_color()),fl_darker(selection_color()),vval);
  
  

 Fl_Boxtype box1 = slider();
  if (!box1) {box1 = (Fl_Boxtype)(box()&-2); if (!box1) box1 = FL_UP_BOX;}
  if (type() == FL_VERT_NICE_SLIDER) {
    draw_box(box1, xsl, ysl, wsl, hsl, perilla);
    int d = (hsl-4)/2;
    draw_box(FL_THIN_DOWN_BOX, xsl+2, ysl+d, wsl-4, hsl-2*d,juan);
  } else if (type() == FL_HOR_NICE_SLIDER) {
    draw_box(box1, xsl, ysl, wsl, hsl, perilla);
    int d = (wsl-4)/2;
    draw_box(FL_THIN_DOWN_BOX, xsl+d, ysl+2, wsl-2*d, hsl-4,pepe);
  } else {
    if (wsl>0 && hsl>0) draw_box(box1, xsl, ysl, wsl, hsl, juan);

    if (type()!=FL_HOR_FILL_SLIDER && type() != FL_VERT_FILL_SLIDER &&
        Fl::scheme_ && !strcmp(Fl::scheme_, "gtk+")) {
      if (W>H && wsl>(hsl+8)) {
        // Draw horizontal grippers
        int yy, hh;
        hh = hsl-8;
        xx = xsl+(wsl-hsl-4)/2;
        yy = ysl+3;

        fl_color(fl_darker(pepe));
        fl_line(xx, yy+hh, xx+hh, yy);
        fl_line(xx+6, yy+hh, xx+hh+6, yy);
        fl_line(xx+12, yy+hh, xx+hh+12, yy);

        xx++;
        fl_color(fl_lighter(pepe));
        fl_line(xx, yy+hh, xx+hh, yy);
        fl_line(xx+6, yy+hh, xx+hh+6, yy);
        fl_line(xx+12, yy+hh, xx+hh+12, yy);
      } else if (H>W && hsl>(wsl+8)) {
        // Draw vertical grippers
        int yy;
        xx = xsl+4;
        ww = wsl-8;
        yy = ysl+(hsl-wsl-4)/2;

        fl_color(fl_darker(juan));
        fl_line(xx, yy+ww, xx+ww, yy);
        fl_line(xx, yy+ww+6, xx+ww, yy+6);
        fl_line(xx, yy+ww+12, xx+ww, yy+12);



        yy++;
        fl_color(fl_lighter(juan));
        fl_line(xx, yy+ww, xx+ww, yy);
        fl_line(xx, yy+ww+6, xx+ww, yy+6);
        fl_line(xx, yy+ww+12, xx+ww, yy+12);
      }
    }
  }

  
  //labelcolor(label_color);
 
  draw_label(xsl, ysl, wsl, hsl);


   
  if (Fl::focus() == this) {
    if (type() == FL_HOR_FILL_SLIDER || type() == FL_VERT_FILL_SLIDER) draw_focus();
    else draw_focus(box1, xsl, ysl, wsl, hsl);
  }
  
  if (( Fl::scheme_) && (strcmp(Fl::scheme_, "plastic")==0)) 
  {
  if (type() == FL_HOR_NICE_SLIDER)
  draw_box(FL_PLASTIC_DOWN_BOX,bxx+2,byy,bww-4,bhh,color()); 
  else
  draw_box(FL_PLASTIC_DOWN_BOX,bxx,byy,bww,bhh,color()); 
  }
  else
  draw_box(box(),bxx,byy,bww,bhh,color());

  textcolor(FL_WHITE); 
  char buf[128];
  format(buf);
  fl_font(textfont(), textsize());
  if (( Fl::scheme_) && (strcmp(Fl::scheme_, "plastic")==0)) 
  fl_color(active_r() ? labelcolor(): fl_inactive(textcolor()));
  else
  fl_color(active_r() ? textcolor(): fl_inactive(textcolor()));
  fl_draw(buf, bxx, byy, bww, bhh, FL_ALIGN_CLIP);
}

void holharm_ui::cb_ui_win_i(Fl_Double_Window*, void*) {
  Pexit=1;
}
void holharm_ui::cb_ui_win(Fl_Double_Window* o, void* v) {
  ((holharm_ui*)(o->user_data()))->cb_ui_win_i(o,v);
}

void holharm_ui::cb_D_Dry_i(Rueda*, void*) {
  D_Dry_c=1;
}
void holharm_ui::cb_D_Dry(Rueda* o, void* v) {
  ((holharm_ui*)(o->parent()->user_data()))->cb_D_Dry_i(o,v);
}

void holharm_ui::cb_D_Vol_i(Rueda*, void*) {
  D_Vol_c=1;
}
void holharm_ui::cb_D_Vol(Rueda* o, void* v) {
  ((holharm_ui*)(o->parent()->user_data()))->cb_D_Vol_i(o,v);
}

void holharm_ui::cb_D_Pan_i(Rueda*, void*) {
  D_Pan_c=1;
}
void holharm_ui::cb_D_Pan(Rueda* o, void* v) {
  ((holharm_ui*)(o->parent()->user_data()))->cb_D_Pan_i(o,v);
}

void holharm_ui::cb_D_Freq_i(Rueda*, void*) {
  D_Freq_c=1;
}
void holharm_ui::cb_D_Freq(Rueda* o, void* v) {
  ((holharm_ui*)(o->parent()->user_data()))->cb_D_Freq_i(o,v);
}

void holharm_ui::cb_D_Mag1_i(SliderW*, void*) {
  D_Mag1_c=1;
}
void holharm_ui::cb_D_Mag1(SliderW* o, void* v) {
  ((holharm_ui*)(o->parent()->user_data()))->cb_D_Mag1_i(o,v);
}

void holharm_ui::cb_D_Mag2_i(SliderW*, void*) {
  D_Mag2_c=1;
}
void holharm_ui::cb_D_Mag2(SliderW* o, void* v) {
  ((holharm_ui*)(o->parent()->user_data()))->cb_D_Mag2_i(o,v);
}

void holharm_ui::cb_D_Mag3_i(SliderW*, void*) {
  D_Mag3_c=1;
}
void holharm_ui::cb_D_Mag3(SliderW* o, void* v) {
  ((holharm_ui*)(o->parent()->user_data()))->cb_D_Mag3_i(o,v);
}

void holharm_ui::cb_D_Mag4_i(SliderW*, void*) {
  D_Mag4_c=1;
}
void holharm_ui::cb_D_Mag4(SliderW* o, void* v) {
  ((holharm_ui*)(o->parent()->user_data()))->cb_D_Mag4_i(o,v);
}

void holharm_ui::cb_D_Mag5_i(SliderW*, void*) {
  D_Mag5_c=1;
}
void holharm_ui::cb_D_Mag5(SliderW* o, void* v) {
  ((holharm_ui*)(o->parent()->user_data()))->cb_D_Mag5_i(o,v);
}

void holharm_ui::cb_D_Mag6_i(SliderW*, void*) {
  D_Mag6_c=1;
}
void holharm_ui::cb_D_Mag6(SliderW* o, void* v) {
  ((holharm_ui*)(o->parent()->user_data()))->cb_D_Mag6_i(o,v);
}

void holharm_ui::cb_D_Mag7_i(SliderW*, void*) {
  D_Mag7_c=1;
}
void holharm_ui::cb_D_Mag7(SliderW* o, void* v) {
  ((holharm_ui*)(o->parent()->user_data()))->cb_D_Mag7_i(o,v);
}

void holharm_ui::cb_D_Mag8_i(SliderW*, void*) {
  D_Mag8_c=1;
}
void holharm_ui::cb_D_Mag8(SliderW* o, void* v) {
  ((holharm_ui*)(o->parent()->user_data()))->cb_D_Mag8_i(o,v);
}

void holharm_ui::cb_D_Mag9_i(SliderW*, void*) {
  D_Mag9_c=1;
}
void holharm_ui::cb_D_Mag9(SliderW* o, void* v) {
  ((holharm_ui*)(o->parent()->user_data()))->cb_D_Mag9_i(o,v);
}

void holharm_ui::cb_D_Mag10_i(SliderW*, void*) {
  D_Mag1_c=10;
}
void holharm_ui::cb_D_Mag10(SliderW* o, void* v) {
  ((holharm_ui*)(o->parent()->user_data()))->cb_D_Mag10_i(o,v);
}

holharm_ui::holharm_ui() {
  fl_open_display();
Fl::visual(FL_DOUBLE|FL_RGB);
fl_register_images();
Fl::scheme("gtk+");
make_window();
ui_win->xclass("holharm");
ui_win->show();
void * v=MT;
Fl::add_timeout(1.0 * 0.04,tick,v);
}

Fl_Double_Window* holharm_ui::make_window() {
  { ui_win = new Fl_Double_Window(470, 360, gettext("exciter"));
    ui_win->color((Fl_Color)147);
    ui_win->callback((Fl_Callback*)cb_ui_win, (void*)(this));
    { d_osc_label = new Fl_Box(0, 0, 470, 22);
      d_osc_label->labelsize(9);
      d_osc_label->labelcolor((Fl_Color)3);
    } // Fl_Box* d_osc_label
    { Fl_Box* o = new Fl_Box(290, 48, 165, 22, gettext("<c> 2008-2009 by Josep Andreu"));
      o->labelsize(9);
      o->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(300, 27, 145, 28, gettext("Exciter"));
      o->labelfont(1);
      o->labelsize(21);
      o->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
    } // Fl_Box* o
    { MT = new Fl_Box(280, 354, 120, 16);
      MT->labelsize(11);
    } // Fl_Box* MT
    { Rueda* o = D_Dry = new Rueda(10, 44, 50, 60, gettext("Dry"));
      D_Dry->box(FL_FLAT_BOX);
      D_Dry->color((Fl_Color)147);
      D_Dry->selection_color((Fl_Color)FL_INACTIVE_COLOR);
      D_Dry->labeltype(FL_NORMAL_LABEL);
      D_Dry->labelfont(0);
      D_Dry->labelsize(11);
      D_Dry->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      D_Dry->step(0.01);
      D_Dry->callback((Fl_Callback*)cb_D_Dry);
      D_Dry->align(FL_ALIGN_TOP);
      D_Dry->when(FL_WHEN_CHANGED);
      strcpy(o->theformat,"%1.2f");
    } // Rueda* D_Dry
    { Rueda* o = D_Vol = new Rueda(80, 44, 50, 60, gettext("Volume"));
      D_Vol->box(FL_FLAT_BOX);
      D_Vol->color((Fl_Color)147);
      D_Vol->selection_color((Fl_Color)FL_INACTIVE_COLOR);
      D_Vol->labeltype(FL_NORMAL_LABEL);
      D_Vol->labelfont(0);
      D_Vol->labelsize(11);
      D_Vol->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      D_Vol->step(0.01);
      D_Vol->value(1);
      D_Vol->callback((Fl_Callback*)cb_D_Vol);
      D_Vol->align(FL_ALIGN_TOP);
      D_Vol->when(FL_WHEN_CHANGED);
      strcpy(o->theformat,"%1.2f");
    } // Rueda* D_Vol
    { Rueda* o = D_Pan = new Rueda(150, 44, 50, 60, gettext("Pan"));
      D_Pan->box(FL_FLAT_BOX);
      D_Pan->color((Fl_Color)147);
      D_Pan->selection_color((Fl_Color)FL_INACTIVE_COLOR);
      D_Pan->labeltype(FL_NORMAL_LABEL);
      D_Pan->labelfont(0);
      D_Pan->labelsize(11);
      D_Pan->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      D_Pan->step(0.01);
      D_Pan->value(0.5);
      D_Pan->callback((Fl_Callback*)cb_D_Pan);
      D_Pan->align(FL_ALIGN_TOP);
      D_Pan->when(FL_WHEN_CHANGED);
      strcpy(o->theformat,"%1.2f");
    } // Rueda* D_Pan
    { Rueda* o = D_Freq = new Rueda(220, 44, 50, 60, gettext("Filter Freq"));
      D_Freq->box(FL_FLAT_BOX);
      D_Freq->color((Fl_Color)147);
      D_Freq->selection_color((Fl_Color)FL_INACTIVE_COLOR);
      D_Freq->labeltype(FL_NORMAL_LABEL);
      D_Freq->labelfont(0);
      D_Freq->labelsize(11);
      D_Freq->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      D_Freq->minimum(21);
      D_Freq->maximum(10020);
      D_Freq->step(1);
      D_Freq->value(21);
      D_Freq->callback((Fl_Callback*)cb_D_Freq);
      D_Freq->align(FL_ALIGN_TOP);
      D_Freq->when(FL_WHEN_CHANGED);
      strcpy(o->theformat,"%5.2f");
    } // Rueda* D_Freq
    { D_Mag1 = new SliderW(15, 144, 26, 181, gettext("Har.1"));
      D_Mag1->type(4);
      D_Mag1->box(FL_FLAT_BOX);
      D_Mag1->color((Fl_Color)147);
      D_Mag1->selection_color((Fl_Color)1);
      D_Mag1->labeltype(FL_NORMAL_LABEL);
      D_Mag1->labelfont(0);
      D_Mag1->labelsize(11);
      D_Mag1->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      D_Mag1->minimum(1);
      D_Mag1->maximum(-1);
      D_Mag1->step(0.01);
      D_Mag1->callback((Fl_Callback*)cb_D_Mag1);
      D_Mag1->align(FL_ALIGN_BOTTOM);
      D_Mag1->when(FL_WHEN_CHANGED);
    } // SliderW* D_Mag1
    { D_Mag2 = new SliderW(60, 144, 26, 181, gettext("Har.2"));
      D_Mag2->type(4);
      D_Mag2->box(FL_FLAT_BOX);
      D_Mag2->color((Fl_Color)147);
      D_Mag2->selection_color((Fl_Color)1);
      D_Mag2->labeltype(FL_NORMAL_LABEL);
      D_Mag2->labelfont(0);
      D_Mag2->labelsize(11);
      D_Mag2->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      D_Mag2->minimum(1);
      D_Mag2->maximum(-1);
      D_Mag2->step(0.01);
      D_Mag2->callback((Fl_Callback*)cb_D_Mag2);
      D_Mag2->align(FL_ALIGN_BOTTOM);
      D_Mag2->when(FL_WHEN_CHANGED);
    } // SliderW* D_Mag2
    { D_Mag3 = new SliderW(105, 144, 26, 181, gettext("Har.3"));
      D_Mag3->type(4);
      D_Mag3->box(FL_FLAT_BOX);
      D_Mag3->color((Fl_Color)147);
      D_Mag3->selection_color((Fl_Color)1);
      D_Mag3->labeltype(FL_NORMAL_LABEL);
      D_Mag3->labelfont(0);
      D_Mag3->labelsize(11);
      D_Mag3->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      D_Mag3->minimum(1);
      D_Mag3->maximum(-1);
      D_Mag3->step(0.01);
      D_Mag3->callback((Fl_Callback*)cb_D_Mag3);
      D_Mag3->align(FL_ALIGN_BOTTOM);
      D_Mag3->when(FL_WHEN_CHANGED);
    } // SliderW* D_Mag3
    { D_Mag4 = new SliderW(150, 144, 26, 181, gettext("Har.4"));
      D_Mag4->type(4);
      D_Mag4->box(FL_FLAT_BOX);
      D_Mag4->color((Fl_Color)147);
      D_Mag4->selection_color((Fl_Color)1);
      D_Mag4->labeltype(FL_NORMAL_LABEL);
      D_Mag4->labelfont(0);
      D_Mag4->labelsize(11);
      D_Mag4->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      D_Mag4->minimum(1);
      D_Mag4->maximum(-1);
      D_Mag4->step(0.01);
      D_Mag4->callback((Fl_Callback*)cb_D_Mag4);
      D_Mag4->align(FL_ALIGN_BOTTOM);
      D_Mag4->when(FL_WHEN_CHANGED);
    } // SliderW* D_Mag4
    { D_Mag5 = new SliderW(195, 144, 26, 181, gettext("Har.5"));
      D_Mag5->type(4);
      D_Mag5->box(FL_FLAT_BOX);
      D_Mag5->color((Fl_Color)147);
      D_Mag5->selection_color((Fl_Color)1);
      D_Mag5->labeltype(FL_NORMAL_LABEL);
      D_Mag5->labelfont(0);
      D_Mag5->labelsize(11);
      D_Mag5->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      D_Mag5->minimum(1);
      D_Mag5->maximum(-1);
      D_Mag5->step(0.01);
      D_Mag5->callback((Fl_Callback*)cb_D_Mag5);
      D_Mag5->align(FL_ALIGN_BOTTOM);
      D_Mag5->when(FL_WHEN_CHANGED);
    } // SliderW* D_Mag5
    { D_Mag6 = new SliderW(240, 144, 26, 181, gettext("Har.6"));
      D_Mag6->type(4);
      D_Mag6->box(FL_FLAT_BOX);
      D_Mag6->color((Fl_Color)147);
      D_Mag6->selection_color((Fl_Color)1);
      D_Mag6->labeltype(FL_NORMAL_LABEL);
      D_Mag6->labelfont(0);
      D_Mag6->labelsize(11);
      D_Mag6->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      D_Mag6->minimum(1);
      D_Mag6->maximum(-1);
      D_Mag6->step(0.01);
      D_Mag6->callback((Fl_Callback*)cb_D_Mag6);
      D_Mag6->align(FL_ALIGN_BOTTOM);
      D_Mag6->when(FL_WHEN_CHANGED);
    } // SliderW* D_Mag6
    { D_Mag7 = new SliderW(285, 144, 26, 181, gettext("Har.7"));
      D_Mag7->type(4);
      D_Mag7->box(FL_FLAT_BOX);
      D_Mag7->color((Fl_Color)147);
      D_Mag7->selection_color((Fl_Color)1);
      D_Mag7->labeltype(FL_NORMAL_LABEL);
      D_Mag7->labelfont(0);
      D_Mag7->labelsize(11);
      D_Mag7->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      D_Mag7->minimum(1);
      D_Mag7->maximum(-1);
      D_Mag7->step(0.01);
      D_Mag7->callback((Fl_Callback*)cb_D_Mag7);
      D_Mag7->align(FL_ALIGN_BOTTOM);
      D_Mag7->when(FL_WHEN_CHANGED);
    } // SliderW* D_Mag7
    { D_Mag8 = new SliderW(330, 144, 27, 181, gettext("Har.8"));
      D_Mag8->type(4);
      D_Mag8->box(FL_FLAT_BOX);
      D_Mag8->color((Fl_Color)147);
      D_Mag8->selection_color((Fl_Color)1);
      D_Mag8->labeltype(FL_NORMAL_LABEL);
      D_Mag8->labelfont(0);
      D_Mag8->labelsize(11);
      D_Mag8->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      D_Mag8->minimum(1);
      D_Mag8->maximum(-1);
      D_Mag8->step(0.01);
      D_Mag8->callback((Fl_Callback*)cb_D_Mag8);
      D_Mag8->align(FL_ALIGN_BOTTOM);
      D_Mag8->when(FL_WHEN_CHANGED);
    } // SliderW* D_Mag8
    { D_Mag9 = new SliderW(375, 144, 26, 181, gettext("Har.9"));
      D_Mag9->type(4);
      D_Mag9->box(FL_FLAT_BOX);
      D_Mag9->color((Fl_Color)147);
      D_Mag9->selection_color((Fl_Color)1);
      D_Mag9->labeltype(FL_NORMAL_LABEL);
      D_Mag9->labelfont(0);
      D_Mag9->labelsize(11);
      D_Mag9->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      D_Mag9->minimum(1);
      D_Mag9->maximum(-1);
      D_Mag9->step(0.01);
      D_Mag9->callback((Fl_Callback*)cb_D_Mag9);
      D_Mag9->align(FL_ALIGN_BOTTOM);
      D_Mag9->when(FL_WHEN_CHANGED);
    } // SliderW* D_Mag9
    { D_Mag10 = new SliderW(416, 144, 26, 181, gettext("Har.10"));
      D_Mag10->type(4);
      D_Mag10->box(FL_FLAT_BOX);
      D_Mag10->color((Fl_Color)147);
      D_Mag10->selection_color((Fl_Color)1);
      D_Mag10->labeltype(FL_NORMAL_LABEL);
      D_Mag10->labelfont(0);
      D_Mag10->labelsize(11);
      D_Mag10->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
      D_Mag10->minimum(1);
      D_Mag10->maximum(-1);
      D_Mag10->step(0.01);
      D_Mag10->callback((Fl_Callback*)cb_D_Mag10);
      D_Mag10->align(FL_ALIGN_BOTTOM);
      D_Mag10->when(FL_WHEN_CHANGED);
    } // SliderW* D_Mag10
    { Fl_Box* o = new Fl_Box(305, 74, 145, 21, gettext("MIDI Chord"));
      o->labelsize(11);
      o->labelcolor((Fl_Color)FL_BACKGROUND2_COLOR);
    } // Fl_Box* o
    { ShowChord = new Fl_Box(305, 94, 145, 31);
      ShowChord->box(FL_PLASTIC_THIN_DOWN_BOX);
      ShowChord->color((Fl_Color)147);
      ShowChord->labelcolor((Fl_Color)168);
    } // Fl_Box* ShowChord
    ui_win->end();
  } // Fl_Double_Window* ui_win
  return ui_win;
}

void holharm_ui::tick(void* v) {
  Fl_Box *o = (Fl_Box*)v;
o->do_callback();
Fl::repeat_timeout(1.0 * 0.04,tick,v);
}
