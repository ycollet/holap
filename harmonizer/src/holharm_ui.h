// generated by Fast Light User Interface Designer (fluid) version 1.0110

#ifndef holharm_ui_h
#define holharm_ui_h
#include <FL/Fl.H>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../config.h"
#include <FL/Fl_Shared_Image.H>
#include <FL/Fl_Valuator.H>
#include <FL/Fl_Dial.H>
#include <FL/Fl_Box.H>
#include <FL/fl_draw.H>
#include <FL/Fl_File_Chooser.H>
#include <FL/fl_ask.H>
#include <FL/x.H>

class Rueda : public Fl_Dial {
public:
  char theformat[32]; 
  Fl_Shared_Image *img; 
  Fl_Image *temp; 
  Rueda(int x,int y, int w, int h, const char *label=0);
  ~Rueda();
  void draw();
  int handle(int  event);
};
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Choice.H>

class holharm_ui {
public:
  int SQuality; 
  int D_Vol_c; 
  int D_Pan_c; 
  int D_Wet_c; 
  int D_IntL_c; 
  int D_IntR_c; 
  int D_IntRL_c; 
  int D_Type_c; 
  int D_Note_c; 
  int D_ChType_c; 
  int D_recocount_c; 
  int Pexit; 
  int Pexitprogram; 
  holharm_ui();
  Fl_Double_Window* make_window();
  Fl_Double_Window *ui_win;
private:
  void cb_ui_win_i(Fl_Double_Window*, void*);
  static void cb_ui_win(Fl_Double_Window*, void*);
public:
  Fl_Box *d_osc_label;
  Fl_Box *MT;
  Rueda *D_Wet;
private:
  void cb_D_Wet_i(Rueda*, void*);
  static void cb_D_Wet(Rueda*, void*);
public:
  Rueda *D_Vol;
private:
  void cb_D_Vol_i(Rueda*, void*);
  static void cb_D_Vol(Rueda*, void*);
public:
  Rueda *D_Pan;
private:
  void cb_D_Pan_i(Rueda*, void*);
  static void cb_D_Pan(Rueda*, void*);
public:
  Rueda *D_IntR;
private:
  void cb_D_IntR_i(Rueda*, void*);
  static void cb_D_IntR(Rueda*, void*);
public:
  Rueda *D_IntL;
private:
  void cb_D_IntL_i(Rueda*, void*);
  static void cb_D_IntL(Rueda*, void*);
public:
  Rueda *D_IntRL;
private:
  void cb_D_IntRL_i(Rueda*, void*);
  static void cb_D_IntRL(Rueda*, void*);
public:
  Fl_Box *ShowMode;
  Fl_Box *SelectedChord;
  Fl_Box *ShowChord;
  Fl_Group *Quality;
  Fl_Check_Button *q4;
private:
  void cb_q4_i(Fl_Check_Button*, void*);
  static void cb_q4(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *q8;
private:
  void cb_q8_i(Fl_Check_Button*, void*);
  static void cb_q8(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *q16;
private:
  void cb_q16_i(Fl_Check_Button*, void*);
  static void cb_q16(Fl_Check_Button*, void*);
public:
  Fl_Choice *D_Type;
private:
  void cb_D_Type_i(Fl_Choice*, void*);
  static void cb_D_Type(Fl_Choice*, void*);
public:
  Fl_Choice *D_Note;
private:
  void cb_D_Note_i(Fl_Choice*, void*);
  static void cb_D_Note(Fl_Choice*, void*);
public:
  Fl_Choice *D_ChType;
private:
  void cb_D_ChType_i(Fl_Choice*, void*);
  static void cb_D_ChType(Fl_Choice*, void*);
public:
  Rueda *D_recocount;
private:
  void cb_D_recocount_i(Rueda*, void*);
  static void cb_D_recocount(Rueda*, void*);
public:
  static void tick(void* v);
  void Qadjust(int Quality);
  void SaveConfig(int Quality);
};
#endif
