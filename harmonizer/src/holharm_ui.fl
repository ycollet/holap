# data file for the Fltk User Interface Designer (fluid)
version 1.0110 
i18n_type 1 
i18n_include <libintl.h> 
i18n_function gettext 
header_name {.h} 
code_name {.cxx}
decl {\#include <stdio.h>} {public global
} 

decl {\#include <stdlib.h>} {public global
} 

decl {\#include <string.h>} {public global
} 

decl {\#include "../config.h"} {public global
} 

decl {\#include <FL/Fl_Shared_Image.H>} {public global
} 

decl {\#include <FL/Fl_Valuator.H>} {public
} 

decl {\#include <FL/Fl_Dial.H>} {public
} 

decl {\#include <FL/Fl_Box.H>} {public
} 

decl {\#include <FL/fl_draw.H>} {public
} 

decl {\#include <FL/Fl_File_Chooser.H>} {public
} 

decl {\#include <FL/fl_ask.H>} {public
} 

decl {\#include <FL/x.H>} {public
} 

class Rueda {: {public Fl_Dial}
} {
  decl {char theformat[32];} {public global
  }
  decl {Fl_Shared_Image *img;} {public global
  }
  decl {Fl_Image *temp;} {public global
  }
  Function {Rueda(int x,int y, int w, int h, const char *label=0):Fl_Dial(x,y,w,h,label)} {} {
    code {char tempfile[128];

sprintf(tempfile,"%s/knob.png",DATADIR);

img = Fl_Shared_Image::get((const char *)tempfile);

if (w != 50) 
   temp = img->copy(w*51,w);
   else temp= img;} {}
  }
  Function {~Rueda()} {} {
    code {img ->release();
delete temp;} {}
  }
  Function {draw()} {open
  } {
    code {int ox,oy,ww,hh;
int paso;
char buf[128];
float val;

ox = x();
oy = y();
ww = w();
hh = h();



  if (minimum() == maximum())
    val = 0.5;
  else {
    val = (value()-minimum())/(maximum()-minimum());
    if (val > 1.0) val = 1.0;
    else if (val < 0.0) val = 0.0;
  }


  paso = (int) (val * 47);


if (damage()&FL_DAMAGE_ALL)
{
draw_box(box(), ox, oy, ww, hh, color());
}


// if (Fl::focus() == this) box(FL_THIN_UP_BOX); else box(FL_FLAT_BOX);


draw_box(box(), ox, oy, ww, hh, color());

temp->draw(ox,oy,ww,hh,paso*ww,0);


// format(buf);

bzero(buf,sizeof(buf));

sprintf(buf,theformat,value());

draw_box(box(),ox,oy+ww,ww,hh-ww, color());

fl_font(FL_HELVETICA, 11);

fl_color(active_r() ? labelcolor() : fl_inactive(labelcolor()));

fl_draw(buf, ox, oy+ww,ww,hh-ww,FL_ALIGN_CLIP);} {}
  }
  Function {handle(int  event)} {return_type int
  } {
    code {int i=0;

if (event == FL_PUSH && Fl::visible_focus()) {
    Fl::focus(this);
    redraw();
} 



switch (event) 
	{
    	              		
    		 case FL_MOUSEWHEEL :
                      {
                      if (Fl::e_dy==0) return 0;
                      handle_push();
                      handle_drag(clamp(increment(value(),Fl::e_dy)));
                      handle_release();
                      return 1;	
                      }
         
                case FL_FOCUS :
                case FL_UNFOCUS :
                      if (Fl::visible_focus()) {
                      redraw();
                      return 1;
                      } else return 0;
        }


 i = Fl_Dial::handle(event);

return i;} {}
  }
} 

class holharm_ui {} {
  decl {int SQuality;} {public
  }
  decl {int D_Vol_c;} {public
  }
  decl {int D_Pan_c;} {public
  }
  decl {int D_Wet_c;} {public
  }
  decl {int D_IntL_c;} {public
  }
  decl {int D_IntR_c;} {public
  }
  decl {int D_IntRL_c;} {public
  }
  decl {int D_Type_c;} {public
  }
  decl {int D_Note_c;} {public
  }
  decl {int D_ChType_c;} {public
  }
  decl {int D_recocount_c;} {public
  }
  decl {int Pexit;} {public
  }
  decl {int Pexitprogram;} {public
  }
  Function {holharm_ui()} {} {
    code {fl_open_display();
Fl::visual(FL_DOUBLE|FL_RGB);
fl_register_images();
make_window();
ui_win->xclass("holharm");
ui_win->show();
void * v=MT;
Fl::add_timeout(1.0 * 0.04,tick,v);} {}
  }
  Function {make_window()} {} {
    Fl_Window ui_win {
      label holharm
      callback {Pexit=1;} selected
      xywh {1827 52 390 322} type Double color 147 hide
    } {
      Fl_Box d_osc_label {
        xywh {0 -2 390 22} labelsize 9 labelcolor 3
      }
      Fl_Box {} {
        label {<c> 2008-2009 by Josep Andreu}
        xywh {220 48 165 22} labelsize 9 labelcolor 7
      }
      Fl_Box {} {
        label Holharm
        xywh {230 22 145 28} labelfont 1 labelsize 21 labelcolor 7
      }
      Fl_Box MT {
        xywh {280 354 120 16} labelsize 11
      }
      Fl_Dial D_Wet {
        label Dry
        callback {D_Wet_c=1;}
        xywh {10 44 50 60} box FLAT_BOX color 147 labelsize 11 labelcolor 7 align 1 step 0.01
        code0 {strcpy(o->theformat,"%1.2f");}
        class Rueda
      }
      Fl_Dial D_Vol {
        label Volume
        callback {D_Vol_c=1;}
        xywh {80 44 50 60} box FLAT_BOX color 147 labelsize 11 labelcolor 7 align 1 step 0.01 value 1
        code0 {strcpy(o->theformat,"%1.2f");}
        class Rueda
      }
      Fl_Dial D_Pan {
        label Pan
        callback {D_Pan_c=1;}
        xywh {150 44 50 60} box FLAT_BOX color 147 labelsize 11 labelcolor 7 align 1 step 0.01 value 0.5
        code0 {strcpy(o->theformat,"%1.2f");}
        class Rueda
      }
      Fl_Dial D_IntR {
        label {Interval R}
        callback {D_IntR_c=1;}
        xywh {80 139 50 60} box FLAT_BOX color 147 labelsize 11 labelcolor 7 align 1 minimum -12 maximum 12 step 1
        code0 {strcpy(o->theformat,"%2.0f");}
        class Rueda
      }
      Fl_Dial D_IntL {
        label {Interval L}
        callback {D_IntL_c=1;}
        xywh {10 139 50 60} box FLAT_BOX color 147 labelsize 11 labelcolor 7 align 1 minimum -12 maximum 12 step 1
        code0 {strcpy(o->theformat,"%2.0f");}
        class Rueda
      }
      Fl_Dial D_IntRL {
        label {Interval L+R}
        callback {D_IntRL_c=1;}
        xywh {150 139 50 60} box FLAT_BOX color 147 labelsize 11 labelcolor 7 align 1 minimum -12 maximum 12 step 1
        code0 {strcpy(o->theformat,"%2.0f");}
        class Rueda
      }
      Fl_Box {} {
        label Mode
        xywh {225 124 145 21} labelsize 11 labelcolor 7
      }
      Fl_Box ShowMode {
        label Normal
        xywh {235 147 145 33} box PLASTIC_THIN_DOWN_BOX color 147 labelcolor 4
      }
      Fl_Box {} {
        label {Selected Chord}
        xywh {225 188 145 21} labelsize 11 labelcolor 7
      }
      Fl_Box SelectedChord {
        xywh {235 211 145 32} box PLASTIC_THIN_DOWN_BOX color 147 labelcolor 1
      }
      Fl_Box {} {
        label {MIDI Chord}
        xywh {225 254 145 21} labelsize 11 labelcolor 7
      }
      Fl_Box ShowChord {
        xywh {235 277 145 31} box PLASTIC_THIN_DOWN_BOX color 147 labelcolor 168
      }
      Fl_Group Quality {
        label Quality
        xywh {225 90 155 30} box DOWN_BOX color 147 labelsize 10 labelcolor 7
      } {
        Fl_Check_Button q4 {
          label Poor
          callback {SaveConfig(4);
fl_message("Restart the plugin to take effect this changes");}
          xywh {230 95 40 20} type Radio down_box DOWN_BOX labelsize 10 labelcolor 7 when 1
        }
        Fl_Check_Button q8 {
          label Fine
          callback {int i;
i=fl_choice("You need a good CPU to operate with this changes, Continue?", "No","Yes",NULL);

if (i)
{
SaveConfig(8);
fl_message("Restart the plugin to take effect this changes");
}

else
{
o->value(0);
Qadjust(SQuality);
}}
          xywh {280 95 45 20} type Radio down_box DOWN_BOX labelsize 10 labelcolor 7 when 1
        }
        Fl_Check_Button q16 {
          label Good
          callback {int i;
i=fl_choice("You need a really good CPU to operate with this changes, Continue?", "No","Yes",NULL);

if (i)
{
SaveConfig(16);
fl_message("Restart the plugin to take effect this changes");
}
else
{
o->value(0);
Qadjust(SQuality);
}}
          xywh {330 95 40 20} type Radio down_box DOWN_BOX labelsize 10 labelcolor 7 when 1
        }
      }
      Fl_Choice D_Type {
        label Mode
        callback {D_Type_c=1;} open
        xywh {130 220 90 20} box PLASTIC_THIN_DOWN_BOX down_box UP_BOX color 14 selection_color 147 labelsize 11 labelcolor 7 textsize 11
      } {}
      Fl_Choice D_Note {
        label Base
        callback {D_Note_c=1;} open
        xywh {130 255 90 20} box PLASTIC_THIN_DOWN_BOX down_box UP_BOX color 14 selection_color 147 labelsize 11 labelcolor 7 textsize 11
      } {}
      Fl_Choice D_ChType {
        label Chord
        callback {D_ChType_c=1;} open
        xywh {130 285 90 20} box PLASTIC_THIN_DOWN_BOX down_box UP_BOX color 14 selection_color 147 labelsize 11 labelcolor 7 textsize 11
      } {}
      Fl_Dial D_recocount {
        label {Rec. Times}
        callback {D_recocount_c=1;}
        xywh {10 234 50 60} box FLAT_BOX color 147 labelsize 11 labelcolor 7 align 1 minimum 1 maximum 48 step 1 value 24
        code0 {strcpy(o->theformat,"%2.0f");}
        class Rueda
      }
    }
  }
  Function {tick(void* v)} {return_type {static void}
  } {
    code {Fl_Box *o = (Fl_Box*)v;
o->do_callback();
Fl::repeat_timeout(1.0 * 0.04,tick,v);} {}
  }
  Function {Qadjust(int Quality)} {} {
    code {switch(Quality)
{
   case 4:
      q4->value(1);
      SQuality=4;
      break;
   case 8:
      q8->value(1);
      SQuality=8;
      break;
   case 16:
      q16->value(1);
      SQuality=16;
      break;
}} {}
  }
  Function {SaveConfig(int Quality)} {} {
    code {FILE *fs;
   char temp[32];
   char filename[128];
   sprintf (filename, "/home/%s/.holharm", getenv ("USER"));
   fs = fopen (filename, "w");
   bzero (temp, sizeof (temp));
   sprintf (temp, "%d", Quality);
   fputs (temp, fs);
   fclose (fs);
   SQuality=Quality;} {}
  }
} 
